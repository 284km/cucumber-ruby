#!/usr/bin/env ruby
# encoding: UTF-8
$: << File.dirname(__FILE__) + '/../lib'

require 'cucumber/platform'
require 'cucumber/ast'
require 'cucumber/feature_file'
require 'cucumber/formatter/ansicolor'

module Cucumber

  module Executable
    module Result
      Passed = Class.new do
        def to_s
          "✓"
        end

        def passed?
          true
        end
      end.new

      Failed = Class.new do
        def to_s
          "✗"
        end

        def passed?
          false
        end
      end.new
    end

    class Base
      attr_reader :result

      def execute(reporter)
        run_steps
        send_result_to reporter
      end

      def passed?
        result.passed?
      end

      private

      def send_result_to(reporter)
        if passed?
          reporter.passed(self)
        else
          reporter.failed(self)
        end
      end

    end

    class Scenario < Base
      attr_reader :feature, :background, :scenario

      def initialize(feature, background, scenario)
        @feature, @background, @scenario = feature, background, scenario
      end

      def describe_to(printer)
        printer.executable_scenario(self)
      end

      private

      def run_steps
        @result = Result::Passed # TODO
      end

    end

    class ExamplesTableRow < Base
      attr_reader :feature, :background, :scenario_outline

      def initialize(feature, background, scenario_outline, examples_table, examples_table_row)
        @feature, @background, @scenario_outline = feature, background, scenario_outline
      end

      def describe_to(printer)
        printer.executable_examples_table_row(self)
      end

      private

      def run_steps
        @result = Result::Failed
      end

    end
  end

  # Walks the AST and emits Executables
  # from scenarios or example table rows
  class Compiler
    def initialize(&on_executable)
      @on_executable = on_executable
    end

    def feature(feature)
      @current_feature = feature
      yield
    end

    def background(background)
      @current_background = background
      yield
    end

    def scenario_outline(scenario_outline)
      @current_scenario_outline = scenario_outline
      yield
    end

    def examples_table(examples_table)
      @current_examples_table = examples_table
      yield
    end

    def examples_table_row(examples_table_row)
      new_executable Executable::ExamplesTableRow.new(current_feature, current_background, current_scenario_outline, current_examples_table, examples_table_row)
    end

    def scenario(scenario)
      new_executable Executable::Scenario.new(current_feature, current_background, scenario)
    end

    private

    def new_executable(executable)
      @on_executable.call(executable)
    end

    attr_reader :current_feature, :current_background, :current_scenario_outline, :current_examples_table
  end

  class PrettyPrinter
    include Cucumber::Formatter::ANSIColor

    def executable_scenario(executable)
      feature, scenario = executable.feature, executable.scenario
      puts feature.title unless feature == current_feature
      puts color(executable.result, "  #{executable.result} #{scenario}")
      @current_feature = feature
    end

    def executable_examples_table_row(executable)
      feature, scenario_outline = executable.feature, executable.scenario_outline
      puts feature.title unless feature == current_feature
      puts color(executable.result, "  #{executable.result} #{scenario_outline}")
      @current_feature = feature
    end

    def summary(total_passed, total_failed)
      total = total_passed + total_failed
      puts "#{total} scenarios run. #{total_passed} passed, #{total_failed} failed"
    end

    private

    def color(result, text)
      if result.passed?
        passed(text)
      else
        failed(text)
      end
    end

    attr_reader :current_feature
  end

  class PrettyConsoleReport
    def initialize(printer)
      @printer = printer
      @total_failed = 0
      @total_passed = 0
    end

    def passed(executable)
      executable.describe_to(@printer)
      @total_passed += 1
    end

    def failed(executable)
      executable.describe_to(@printer)
      @total_failed += 1
    end

    def summarise
      @printer.summary(total_passed, total_failed)
    end

    private

    attr_reader :total_passed, :total_failed
  end

  report = PrettyConsoleReport.new(PrettyPrinter.new)
  compiler = Compiler.new do |executable|
    executable.execute(report)
  end
  files = Dir['features/docs/**/*.feature']
  files.each do |path|
    feature = FeatureFile.new(path).parse([], {})
    feature.describe_to(compiler)
  end
  report.summarise

end
