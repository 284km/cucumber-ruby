#!/usr/bin/env ruby
# encoding: UTF-8
$: << File.dirname(__FILE__) + '/../lib'

require 'cucumber/platform'
require 'cucumber/ast'
require 'cucumber/feature_file'
require 'cucumber/formatter/ansicolor'

module Cucumber

  module Executable
    module Result
      Passed = Class.new do
        def to_s
          "✓"
        end

        def describe_to(visitor, *args)
          visitor.passed(*args)
        end
      end.new

      Failed = Class.new do
        def to_s
          "✗"
        end

        def describe_to(visitor, *args)
          visitor.failed(*args)
        end
      end.new
    end

    class Base

      def execute(report)
        report.before_scenario(self)
        run_steps
        report.after_scenario(self, result)
      end

      private

      attr_reader :result

    end

    class Scenario < Base
      attr_reader :feature, :background, :scenario

      def initialize(feature, background, scenario)
        @feature, @background, @scenario = feature, background, scenario
      end

      def describe_to(visitor, *args)
        visitor.executable_scenario(self, *args)
      end

      private

      def run_steps
        @result = Result::Passed # TODO
      end

    end

    class ExamplesTableRow < Base
      attr_reader :feature, :background, :scenario_outline

      def initialize(feature, background, scenario_outline, examples_table, examples_table_row)
        @feature, @background, @scenario_outline = feature, background, scenario_outline
      end

      def describe_to(visitor, *args)
        visitor.executable_examples_table_row(self, *args)
      end

      private

      def run_steps
        @result = Result::Failed # TODO
      end

    end
  end

  # Walks the AST and emits Executables
  # from scenarios or example table rows
  class Compiler
    def initialize(&on_executable)
      @on_executable = on_executable
    end

    def feature(feature)
      @current_feature = feature
      yield
    end

    def background(background)
      @current_background = background
      yield
    end

    def scenario_outline(scenario_outline)
      @current_scenario_outline = scenario_outline
      yield
    end

    def examples_table(examples_table)
      @current_examples_table = examples_table
      yield
    end

    def examples_table_row(examples_table_row)
      new_executable Executable::ExamplesTableRow.new(current_feature, current_background, current_scenario_outline, current_examples_table, examples_table_row)
    end

    def scenario(scenario)
      new_executable Executable::Scenario.new(current_feature, current_background, scenario)
    end

    private

    def new_executable(executable)
      @on_executable.call(executable)
    end

    attr_reader :current_feature, :current_background, :current_scenario_outline, :current_examples_table
  end

  class PrettyPrinter
    include Cucumber::Formatter::ANSIColor

    def before_scenario(scenario)
      print_feature_name(scenario.feature)
    end

    def executable_scenario(scenario, result)
      feature, scenario = scenario.feature, scenario.scenario
      print_scenario_result(feature, scenario.to_s, result)
    end

    def executable_examples_table_row(example, result)
      feature, scenario_outline = example.feature, example.scenario_outline
      print_scenario_result(feature, scenario_outline.to_s, result)
    end

    def print(message)
      puts message
    end

    private

    def print_feature_name(feature)
      return if feature == current_feature
      @current_feature = feature
      puts
      puts "  #{feature.title}"
    end

    def print_scenario_result(feature, name, result)
      puts color(result, "    #{result} #{name}")
    end

    def color(result, text)
      result.describe_to(self, text)
    end

    attr_reader :current_feature
  end

  class PrettyConsoleReport
    def initialize(printer)
      @printer = printer
    end

    def before_scenarios
      @summary = ScenarioResultSummary.new
    end

    def before_scenario(scenario)
      @printer.before_scenario(scenario)
    end

    def after_scenario(scenario, result)
      scenario.describe_to(@printer, result)
      result.describe_to(@summary)
    end

    def after_scenarios
      @printer.print(@summary.to_s)
    end

    class ScenarioResultSummary
      def initialize
        @total_failed = 0
        @total_passed = 0
      end

      def passed(*args)
        @total_passed += 1
      end

      def failed(*args)
        @total_failed += 1
      end

      def to_s
        total = @total_passed + @total_failed
        "#{total} scenarios run. #{@total_passed} passed, #{@total_failed} failed"
      end
    end

  end

  report = PrettyConsoleReport.new(PrettyPrinter.new)
  report.before_scenarios
  compiler = Compiler.new do |executable|
    executable.execute(report)
  end
  files = Dir['features/docs/**/*.feature']
  files.each do |path|
    feature = FeatureFile.new(path).parse([], {})
    feature.describe_to(compiler)
  end
  report.after_scenarios

end
