#!/usr/bin/env ruby
# encoding: UTF-8
$: << File.dirname(__FILE__) + '/../lib'
$: << File.dirname(__FILE__) + '/../../cucumber-ruby-core/lib'

require 'cucumber/platform'
require 'cucumber/ast'
require 'cucumber/feature_file'
require 'cucumber/formatter/ansicolor'

module Cucumber
  require 'cucumber/formatter/progress'
  require 'cucumber/formatter/pretty'
  class LegacyFormatterReport
    def initialize(runtime, legacy_formatter_type)
      @runtime = runtime
      @original = legacy_formatter_type.new(runtime, STDOUT, skip_profile_information: true)
    end

    def before_test_case(test_case)
      @original.before_feature_element(:element)

      printer = ScenarioPrinter.new(@original)
      test_case.describe_source_to(printer)
    end

    def after_test_case(test_case, result)
      builder = LegacyResultBuilder.new
      result.describe_to(builder)
      @runtime.record_result(builder.scenario)

      @original.after_feature_element(:element)
    end

    def before_test_step(step)
    end

    def after_test_step(step, result)
      builder = LegacyResultBuilder.new
      result.describe_to(builder)
      step_result = builder.step_result
      @runtime.step_visited(step_result)
      @original.before_step_result(step_result)
      printer = StepPrinter.new(@original, @runtime, step_result)
      step.describe_source_to(printer)
      @original.after_step_result(step_result) if @original.respond_to?(:after_step_result)
    end

    def after_suite
      @original.after_features(nil)
    end

    class ScenarioPrinter
      def initialize(report)
        @report = report
      end

      def hook(*)
      end

      def feature(feature)
      end

      def scenario(scenario)
        @report.scenario_name(scenario.keyword, scenario.name, :file_colon_line, :source_indent)
      end

      def scenario_outline(scenario_outline)
      end

      def examples_table(examples)
      end

      def examples_table_row(row)
      end

      def background(background)
      end

      def step(step)
      end
    end

    class StepPrinter
      def initialize(report, runtime, step_result)
        @report = report
        @runtime = runtime
        @step_result = step_result
      end

      def hook(*)
      end

      def feature(feature)
      end

      def scenario(scenario)
      end

      def background(background)
      end

      def step(step)
        # TODO: How else can we get this?
        step_match = @runtime.step_match(step.name)
        @report.step_name(step.keyword, step_match, @step_result.status, :source_indent, :background, :file_colon_line)
      end

      def scenario_outline(scenario_outline)
      end

      def examples_table(examples)
      end

      def examples_table_row(row)
      end
    end

    require 'cucumber/ast/step_result'
    class LegacyResultBuilder
      def passed
        @status = :passed
      end

      def failed
        @status = :failed
      end

      def undefined
        @status = :undefined
      end

      def skipped
        @status = :skipped
      end

      def exception(exception, *)
        @exception = exception
      end

      def duration(*); end

      def step_result
        Ast::StepResult.new(:keyword, :step_match, :multiline_arg, @status, @exception, :source_indent, :background, :file_colon_line)
      end

      def scenario
        LegacyScenario.new(@status)
      end

      LegacyScenario = Struct.new(:status)
    end

  end

  features_glob = ARGV[0] || 'features/**/*.feature'
  feature_files = Dir[features_glob].reject { |f| f =~ /iso-8859-1/ }
  puts "Running features:"
  p feature_files

  require 'cucumber/core'
  extend Cucumber::Core

  require 'cucumber/core/gherkin/document'
  features = feature_files.map do |file|
    Cucumber::Core::Gherkin::Document.new(file, File.read(file))
  end

  require 'cucumber/runtime'
  require 'cucumber'
  class ClassicMappings

    def test_step(step, mapper)
      step_match = runtime.step_match(step.name)
      mapper.map { step_match.invoke(step.multiline_arg) }
    rescue Cucumber::Undefined
    end

    def test_case(test_case, mapper)
      scenario = Scenario.new(test_case)
      ruby = @ruby
      mapper.before do
        ruby.begin_rb_scenario(scenario)
      end
      @ruby.hooks_for(:before, scenario).each do |hook|
        mapper.before do
          hook.invoke('location', scenario)
        end
      end
    end

    def runtime
      return @runtime if @runtime
      result = Cucumber::Runtime.new
      @ruby = result.load_programming_language('rb')
      result.support_code.load_files!(support_files)
      @runtime = result
    end

    private

    def support_files
      Dir['features/**/*.rb']
    end

    # adapts our test_case to look like the Cucumber Runtime's Scenario
    class Scenario
      def initialize(test_case)
        @test_case = test_case
      end

      def accept_hook?(hook)
        hook.tag_expressions.all? { |expression| @test_case.match_tags?(expression) }
      end

      def language
        @test_case.language
      end
    end
  end

  mappings = ClassicMappings.new
  report = LegacyFormatterReport.new mappings.runtime, Cucumber::Formatter::Pretty

  require 'cucumber/core/test/tag_filter'
  execute features, mappings, report, [[Cucumber::Core::Test::TagFilter, ['~@jruby']]]
  report.after_suite
end
